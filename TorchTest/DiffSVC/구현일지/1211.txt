infer_tool.py의 self.pe코드를 살펴보면 f0_pred를 가져오며, 이건
GaussianDiffusion이 끝나고 나서 후처리 하는 모델이다
nsf-hifigan도 이후에 동작한다

전체 모델 제작은 DiffSVC/DiffSVC에서 제작, 해당 디렉터리는 root

원리원칙
-모든 gpu 변환 작업은 선언이 되는곳에서 바로
-모든 경로는 root을 기준으로 하는 상대경로
-최상위 디렉터리를 제외한 모든 디렉터리에서는 import를 .로한다
 이는 최상위 디렉터리에서 하위 디렉터리의 코드를 import할경우, 재귀적으로 import할 때
 같은 디렉터리의 파일을 import하는데 문제가 없게 함이다
-같은 이유로, 테스트, 파이프라인 코드들도 최상위 디렉터리 바로 아래에서 동작한다
-모든 모델의 저장 파일은 종류를 막론하고, root/models 아래에 넣는다

변경된것들
-condtiion model들(embeddint.py를 제외한, hubert 등등)은
 경로를 diffusion 디렉터리 아래로 넣는다

생각해볼만한 것들
-nsf hifigan은 cond를 만드는 모델이 아니다.
 그러나 nsf hifigan의 입력에 사용하는 wav2spec code는 이곳저곳에서 사용하며,
 코드의 선언을 자세히 보면 spec으로 만드는 방식 자체는 vocoder인 nsf에 종속 시켜놨다
 (상속을 하여 무조건 구현하도록 되어있다)

 conditioning에 있는 코드들은 condition용이 아닌 nsf의 코드를 사용해야하지만,
 해당 디렉터리 아래에 있어야 사용이 가능하다
 wav2spec을 따로 떼어놓을 수는 있으나, 이 경우는 vocoder에 같은 코드를 한 번 더
 적어놓던가 해야한다

 반면, 원본의 코드를 살펴보면 network아래 diff/hubert/vocoder가 나뉘어있다
 이를 최상위 디렉터리의 infer.py나 run.py를 사용하여 하위 패키지를 부르는 구조로 되어있다
 이런 구조기 때문에 root/utils에 각종 utils를 잘라다가 때려박을 수가 있었던 것

 요약하자면, 원본은 코드를 종류별로 묶어놓은 최상위 디렉터리에서 실행파일에다가만 묶어놨다면
 (그래서 hparams에 class의 경로까지 따로있다)
 나의 코드는 실행 단계별로 코드를 묶어 놓았고 이 덕에 여러군데서 쓰는 코드에 문제가 생겼다

 이 문제를 해결할 방법이 하나 있는데, 함수의 매개변수로 (wav2mel)함수를 넣는 것이다
 최상위 디렉터리가 diffusion 디렉터리 내부의 코드를 사용하고,
 마찬가지로 vocoder의 code도 사용하므로
 vocoder의 wav2spec을 떼어다가 diffusion/conditioning에 던져줘버리는 것,
 물론, default값은 원래대로 해놓고 None일 때만 사용하게 되는 눈속임에 가깝게 될것이다.

-diffusion model은 mel을 받아서, mel을 뱉는다
그게 다라면 mel을 만드는 과정은 diffusion class 바깥에 있어도 상관 없으나
문제는 mel에서 cond를 뽑아내는 과정에서 mel이 필요하다는것
즉, wav -> cond로 바로 가는 것은 불가능하고 wav -> mel -> cond라는것
그리고 wav -> mel의 코드가 하필 vocoder에 종속(굳이 그럴 필요없으나 코드 형태가)되었는점
해결 방법은 vocoder는 diffusion.py 바깥에 두고(그리고 pipeline에서 따로 처리하고,)
wav2spec 함수는 diffusion class의 field로(혹은 self로 받아주는 메서드? 여하튼) 둔다

제작된 코드들
-args2hparams.py
    args를 받아오는 코드는 추후제작, hparams만 적어둠
    cond model과 wavenet의 hparams의 코드를 통합시켜놨다
    ddpm의 hparams를 필요에 따라 하나씩가져오는 중이며, 가져온 것은 다음과 같다
        "schedule_name": "linear", ※ 원본의 값이다, 그리고 cosine은 제작 방식이 좀 다르다
        "steps": 1000, ※ 마찬가지
    ※ max_beta 값은 없으나 linear의 경우 완벽히 동일한 값으로 동작한다

-GuassianDiffusion을 DiffSVC/diffusion에 제작중
    __init__은 _hparams만 받고, self.hparams로 선언해둔다
    이후 전부 self.hparams의 정보로 해결

    schedule의 코드를 만들었다

    wavenet의 디렉토리를 만들고 코드를 가져왔으며,
    load와 forward를 테스트하였다

    embedding의 디렉토리를 만들고 코드를 가져왔으며
    denorm, norm코드를 crepe에서 가져와서 독립시켜놨고,
    load는 테스트했으며
    forward는 test하지 못하였다!!!

-utils/path_utils.py에 절대경로 관련 코드를 작성해뒀다
-models 디렉토리를 생성
    wavenet모델이 보관되었다
-vocoder/NsfHiFiGAN을 만들고 시험해봤다
-raw를 만들어놨다
-wav2spec(load wav, wav2spec모두다 하는 함수)를 class 선언에서 받거나,
아니면 default를 사용하도록 만들어놨으며 default는 conditioning dir안에 존재한다
-crepe를 만들어 놨고, wav2spec이후 crepe가 동작하는지 확인해놨다
※ rel2abs는 class안에 안만들어놔서 절대 경로로 입력을 해줘야 동작한다
-hubert를 class 안에 넣고, Hubert의 코드를 테스트했다
-get_align과 wav2spec을 conditionion의 __init__.py에 넣고,
default어쩌고.py를 지웠다
-get_align함수를 사용하여 mel2ph를 만들고 4개의 raw_cond를 제작하였다

추후 해야할일
-Gaussian쪽에는 __init__에 주석으로 할 일을 적어 놨다
-rel2abs는 '현재실행중인' 파일의 상위 디렉토리를 root로 잡도록 해놨다.
즉, root를 사용하는 방식으로 수정할 필요가 있음
-embedding 모델의 forward, 이건 다른 모델들 다 올리고 나서 할 일
-nsf hifigan의 재료중 하나인 f0_pred의 제작을 가능케하는 모델
